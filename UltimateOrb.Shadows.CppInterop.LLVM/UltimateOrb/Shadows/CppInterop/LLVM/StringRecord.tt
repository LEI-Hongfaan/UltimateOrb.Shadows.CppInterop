using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

<#
var records = new (int CharBitSize, int PlatfromBitwidth)[] {
    (8, 64),
    (16, 64),
    (32, 64),
    (8, 32),
    (16, 32),
    (32, 32),
};
#>
namespace UltimateOrb.Shadows.CppInterop {

    namespace LLVM {
<#
foreach (var record in records) {
    var PlatfromIntPtrSize = record.PlatfromBitwidth / 8;
#>

        struct Char<#= record.CharBitSize #>StringRecord_<#= record.PlatfromBitwidth #><IsStringLayoutAlternativeT, TChar>
            where IsStringLayoutAlternativeT : struct, IConstantDataType<bool, IsStringLayoutAlternativeTag>
            where TChar : unmanaged {

            private const int __RecordStructureSize = NonResidentStringRecord_<#= record.PlatfromBitwidth #><IsStringLayoutAlternativeT, TChar>.__StructureSize > Char<#= record.CharBitSize #>ResidentStringRecord_<#= record.PlatfromBitwidth #><IsStringLayoutAlternativeT, TChar>.__StructureSize ?
                NonResidentStringRecord_<#= record.PlatfromBitwidth #><IsStringLayoutAlternativeT, TChar>.__StructureSize :
                Char<#= record.CharBitSize #>ResidentStringRecord_<#= record.PlatfromBitwidth #><IsStringLayoutAlternativeT, TChar>.__StructureSize;

            internal const int __StructureSize = checked((sizeof(UInt<#= record.PlatfromBitwidth #>) - 1 + __RecordStructureSize) / sizeof(UInt<#= record.PlatfromBitwidth #>) * sizeof(UInt<#= record.PlatfromBitwidth #>));

            unsafe fixed UInt<#= record.PlatfromBitwidth #> p[__StructureSize / sizeof(UInt<#= record.PlatfromBitwidth #>)];

            internal ref NonResidentStringRecord_<#= record.PlatfromBitwidth #><IsStringLayoutAlternativeT, TChar> _NonResidentRecord {
                
                get {
                    unsafe {
                        return ref Unsafe.As<UInt<#= record.PlatfromBitwidth #>, NonResidentStringRecord_<#= record.PlatfromBitwidth #><IsStringLayoutAlternativeT, TChar>>(ref p[0]);
                    }
                }
            }

            internal ref Char<#= record.CharBitSize #>ResidentStringRecord_<#= record.PlatfromBitwidth #><IsStringLayoutAlternativeT, TChar> _ResidentRecord {
                
                get {
                    unsafe {
                        return ref Unsafe.As<UInt<#= record.PlatfromBitwidth #>, Char<#= record.CharBitSize #>ResidentStringRecord_<#= record.PlatfromBitwidth #><IsStringLayoutAlternativeT, TChar>>(ref p[0]);
                    }
                }
            }
        }
<#
}
#>
    }
}
